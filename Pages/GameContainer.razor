@page "/"
@using Microsoft.AspNetCore.SignalR.Client 
@using Microsoft.AspNetCore.Components.Authorization 
@using Microsoft.EntityFrameworkCore
@using DM5K.Components
@using DM5K.Data
@using DM5K.Models 
@using System.Security.Claims 

@implements IAsyncDisposable
@inject IDbContextFactory<DM5KDbContext> DbFactory
@inject NavigationManager NavManager
@inject AuthenticationStateProvider AuthStateProvider

<div id="main-game-fullscreen-container">
    <div class="main-game-menu-buttons-container">
        <button @onclick="OnToggleNavMenu" class="main-game-menu-button button-primary">
            <span class="material-icons md-48">menu</span>
        </button>
        <button @onclick="OnRefresh" class="main-game-menu-button button-primary">
            <span class="material-icons md-48">sync</span>
        </button>
    </div>
    <div class="main-game-zoom-slider-container @(_menuExpanded ? "main-game-zoom-slider-container-expanded" : "")">
        <ZoomControl MaxValue="@_scaleMax" MinValue="@_scaleMin"
                     ZoomValue="@_scale" ScaleStep="@_scaleStep"
                     OnZoomSliderChanged="@HandleCanvasScaleChanged" />
    </div>
    <GameMenu MenuExpanded="@_menuExpanded" />
    <div id="main-game-container" class="main-game-container @(_menuExpanded ? "": "main-game-container-expanded")">
        <GameCanvas @ref="_gameCanvasRef" Characters="CampaignCharacters"
                    Map="@SelectedMap" ScaleStep="@_scaleStep"
                    ScaleMin="@_scaleMin" ScaleMax="@_scaleMax"
                    OnScaleChanged="@HandleCanvasScaleChanged"
                    OnSaveMe="@HandleSaveCharacter"
                    CurrentUsername="@_currentUsername"/>
    </div>
</div>

@code {

    public ICollection<Campaign> Campaigns { get; set; }
    public Campaign SelectedCampaign { get; set; }
    public ICollection<Character> CampaignCharacters { get; set; }
    public ICollection<Map> CampaignMaps { get; set; }
    public Map SelectedMap { get; set; }

    private string _currentUsername { get; set; }
    private HubConnection _gameHub { get; set; }
    private GameCanvas _gameCanvasRef { get; set; }
    private bool _menuExpanded { get; set; }
    private string _menuClass { get; set; }
    private double _scale { get; set; } = 1f;
    private double _scaleMin { get; set; } = 0.5f;
    private double _scaleMax { get; set; } = 1.5f;
    private double _scaleStep { get; set; } = 0.05f;

    protected override void OnInitialized()
    {
        base.OnInitialized();
    }

    protected override async Task OnInitializedAsync()
    {

        OnRefresh();

        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        _currentUsername = user.Identity.Name;

        _gameHub = new HubConnectionBuilder()
        .WithUrl(NavManager.ToAbsoluteUri("/gamehub"))
        .Build();

        _gameHub.On("SyncDBCommand", () =>
        {
            OnRefresh();
        });

        await _gameHub.StartAsync();
    }

    async Task AdviseSyncDB() => await _gameHub.SendAsync("SyncDB");

    private void OnToggleNavMenu()
    {
        _menuExpanded = !_menuExpanded;
        _gameCanvasRef.ResetMaxScroll();
        StateHasChanged();
    }

    private void OnRefresh()
    {
        using var _localDb = DbFactory.CreateDbContext();

        Campaigns = _localDb.Campaigns.ToList();
        SelectedCampaign = Campaigns.FirstOrDefault();
        CampaignMaps = _localDb.Maps.ToList();
        SelectedMap = CampaignMaps.FirstOrDefault();
        CampaignCharacters = _localDb.Characters.Where(x => x.Campaign == SelectedCampaign).ToList();
        StateHasChanged();
    }

    private void HandleSaveCharacter(Character c)
    {
        using var _localDb = DbFactory.CreateDbContext();

        _localDb.Characters.Update(c);
        _localDb.SaveChanges();
        AdviseSyncDB();
    }

    private void HandleCanvasScaleChanged(double scale)
    {
        _scale = scale;
        _gameCanvasRef.Zoom(scale);
        StateHasChanged();
    }

    public async ValueTask DisposeAsync()
    {
        if (_gameHub is not null)
        {
            await _gameHub.DisposeAsync();
        }
    }
}
