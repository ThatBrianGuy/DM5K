@inject IJSRuntime jsr

<button type="button" @onclick="@OnZoomPlus">
    <span class="material-icons">add</span>
</button>
<button type="button" @onclick="@OnZoomMinus">
    <span class="material-icons">remove</span>
</button>
<button type="button" @onclick="@ToggleFullScreen">
    <span class="material-icons">@(_fullscreenState ? "fullscreen_exit" : "fullscreen")</span>
</button>
@*<input type="range" min="@MinValue" max="@MaxValue"
            @bind-value="@ZoomValue" step="@ScaleStep"
            class="slider" id="main-game-zoom-slider"
            @oninput="@((ChangeEventArgs e) => OnSliderChanged(e))" />*@

@code {
    [Parameter]
    public double ZoomValue { get; set; }

    [Parameter]
    public Action<double> OnZoomSliderChanged { get; set; }

    [Parameter]
    public double MaxValue { get; set; }

    [Parameter]
    public double MinValue { get; set; }

    [Parameter]
    public double ScaleStep { get; set; }

    private bool _fullscreenState { get; set; } = false;

    private void OnSliderChanged(ChangeEventArgs e)
    {
        ZoomValue = double.Parse(e.Value.ToString());
        OnZoomSliderChanged?.Invoke(ZoomValue);
    }

    private void OnZoomPlus()
    {
        if ((ZoomValue + ScaleStep) <= MaxValue)
        {
            ZoomValue += ScaleStep;
            //_value = ZoomValue;
            OnZoomSliderChanged?.Invoke(ZoomValue);
        }
    }

    private void OnZoomMinus()
    {
        if ((ZoomValue - ScaleStep) >= MinValue)
        {
            ZoomValue -= ScaleStep;
            //_value = ZoomValue;
            OnZoomSliderChanged?.Invoke(ZoomValue);
        }
    }

    private async Task ToggleFullScreen()
    {
        _fullscreenState = !_fullscreenState;
        await jsr.InvokeVoidAsync("canvasMethods.toggleFullscreen", _fullscreenState);
    }
}
