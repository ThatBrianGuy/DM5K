<div class="container">
    <div class="row">
        <div class="two columns">
            <button type="button" @onclick="@OnZoomMinus" class="button button-primary zoom-button">-</button>
        </div>
        <div class="eight columns">
            <input type="range" min="50" max="150"
                    value="@_value" step="@_step"
                    class="slider" id="main-game-zoom-slider"
                    @onchange="@((ChangeEventArgs e) => OnSliderChanged(e))" />
        </div>
        <div class="two columns">
            <button type="button" @onclick="@OnZoomPlus" class="button button-primary zoom-button">+</button>
        </div>
    </div>
</div>

@code {

    private int _step { get; set; } = 25;
    private double _scale { get; set; } = 1;
    private int _value { get; set; } = 100;
    private int _min { get; set; } = 50;
    private int _max { get; set; } = 150;


    [Parameter]
    public Action<double> OnZoomSliderChanged { get; set; }

    private void OnSliderChanged(ChangeEventArgs e)
    {
        var value = double.Parse(e.Value.ToString());
        _scale = value / 100;
        OnZoomSliderChanged?.Invoke(_scale);
    }

    private void OnZoomPlus()
    {
        if ((_value + _step) <= _max)
        {
            _value += _step;
            _scale = _scale + ((double)_step / 100);
            OnZoomSliderChanged?.Invoke(_scale);
        }

    }

    private void OnZoomMinus()
    {
        if ((_value - _step) >= _min)
        {
            _value -= _step;
            _scale = _scale - ((double)_step / 100);
            OnZoomSliderChanged?.Invoke(_scale);
        }

    }
}
