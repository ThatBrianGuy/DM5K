@using Blazor.Extensions.Canvas
@using Blazor.Extensions
@using Blazor.Extensions.Canvas.Canvas2D
@using DM5K.Models
@using DM5K.Helpers

@inject IJSRuntime jsr

<InputHandler ID="canvas-container"
              OnPressDown="@HandleMapDragStart"
              OnDrag="@HandleMapDrag"
              OnDragEnd="@HandleMapDragEnd"
              OnZoom="@HandleZoom"
              CssClass="canvas-container"
              CssStyle="@_containerStyle">
    <CascadingValue Value="this">
        @foreach (var c in Characters)
        {
            <Token TileSize="@_tileSize" Character="@c" IsOwned="@(c.OwnerName == CurrentUsername)"></Token>
        }
    </CascadingValue>
    <BECanvas @ref="_canvasRef" />
</InputHandler>

@code {

    [Parameter]
    public ICollection<Character> Characters { get; set; }

    [Parameter]
    public string CurrentUsername { get; set; }

    [Parameter]
    public Map Map { get; set; }

    [Parameter]
    public int ScrollOffsetX { get; set; } = 0;

    [Parameter]
    public int ScrollOffsetY { get; set; } = 0;

    [Parameter]
    public double Scale { get; set; } = 1;

    [Parameter]
    public double ScaleMax { get; set; }

    [Parameter]
    public double ScaleMin { get; set; }

    [Parameter]
    public double ScaleStep { get; set; }

    [Parameter]
    public Action<double> OnScaleChanged { get; set; }

    [Parameter]
    public Action<Character> OnSaveMe { get; set; }

    public Dictionary<Token, TokenPosition> DraggedTokens { get; set; } = new();

    private int _tileSize { get; set; } = 50;
    private string _containerStyle { get; set; }
    private Canvas2DContext _context { get; set; }
    protected BECanvasComponent _canvasRef { get; set; }

    private double _viewHeight { get; set; }
    private double _viewWidth { get; set; }
    private double _maxScrollX { get; set; }
    private double _maxScrollY { get; set; }
    private double _startScale { get; set; } = -1;

    protected override void OnInitialized()
    {
        // Set container style
        _containerStyle = string.Format("height: {0}px; width: {1}px; zoom: 1; -moz-transform: scale(1);"
            , Map.Height * _tileSize
            , Map.Width * _tileSize);

        base.OnInitialized();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Create the canvas object
            _context = await _canvasRef.CreateCanvas2DAsync();

            // Set Canvas height from map dimensions
            await jsr.InvokeVoidAsync("canvasMethods.setDimensions", (Map.Height * _tileSize) + 1, (Map.Width * _tileSize) + 1, DotNetObjectReference.Create(this));

            // Draw Canvas
            await RedrawCanvas();

            // Get browser size and center window
            await OnBrowserResize();
        }

        await base.OnInitializedAsync();
    }

    [JSInvokable]
    public async Task OnBrowserResize()
    {
        // Get window dimensions
        var dim = await jsr.InvokeAsync<WindowDimension>("canvasMethods.getWindowDimensions");
        _viewHeight = dim.Height;
        _viewWidth = dim.Width;

        // If viewport is smaller than map, scroll to center
        if (_viewHeight < (Map.Height * _tileSize) || (_viewWidth < (Map.Width * _tileSize)))
        {
            var dx = ((Map.Width * _tileSize) * Scale) - _viewWidth;
            var dy = ((Map.Height * _tileSize) * Scale) - _viewHeight;
            _maxScrollX = dx;
            _maxScrollY = dy;
            ScrollOffsetX = (int)(dx / 2);
            ScrollOffsetY = (int)(dy / 2);
            await jsr.InvokeVoidAsync("canvasMethods.scrollWindow", ScrollOffsetX, ScrollOffsetY);
        }
    }

    public void Zoom(double scale)
    {
        Scale = scale;
        // Set container style
        _containerStyle = string.Format("height: {0}px; width: {1}px; zoom: {2}; -moz-transform: scale({2});"
            , Map.Height * _tileSize
            , Map.Width * _tileSize
            , Scale);

        ResetMaxScroll();
        StateHasChanged();
    }

    public void ResetMaxScroll()
    {
        var dx = ((Map.Width * _tileSize) * Scale) - _viewWidth;
        var dy = ((Map.Height * _tileSize) * Scale) - _viewHeight;
        _maxScrollX = dx;
        _maxScrollY = dy;
    }

    private async Task RedrawCanvas()
    {
        for (var x = 0; x <= (Map.Width * _tileSize); x += _tileSize)
        {
            await _context.MoveToAsync(0.5 + x, 0);
            await _context.LineToAsync(0.5 + x, (Map.Height * _tileSize));
        }

        for (var y = 0; y <= (Map.Height * _tileSize); y += _tileSize)
        {
            await _context.MoveToAsync(0, 0.5 + y);
            await _context.LineToAsync((Map.Width * _tileSize), 0.5 + y);
        }

        await _context.SetStrokeStyleAsync("black");
        await _context.StrokeAsync();
    }

    private void HandleMapDragStart(CanvasEventArgs e)
    {
        if (DraggedTokens.Count == 0)
        {
            jsr.InvokeAsync<string>("console.log", string.Format("canvas mousedown: x: {0}, y: {1}", e.ClientX, e.ClientY));
        }
    }

    private void HandleMapDrag(CanvasEventArgs e)
    {
        // If no token is currently being dragged..
        if (DraggedTokens.Count == 0)
        {
            // Calculate the current scroll offset and send it to javascript
            var curScrollX = ScrollOffsetX - (e.DeltaX * (1/Scale));
            var curScrollY = ScrollOffsetY - (e.DeltaY * (1/Scale));
            jsr.InvokeVoidAsync("canvasMethods.scrollWindow", curScrollX, curScrollY);
        }
        else
        {
            // Token is being dragged
            var dx = e.DeltaX * (1/Scale);
            var dy = e.DeltaY * (1/Scale);
            jsr.InvokeAsync<string>("console.log", string.Format("token drag: x: {0}, dx: {1}, offsetx: {2}, actx: {3}", e.StartX, e.DeltaX, dx, dy));
            foreach(var t in DraggedTokens)
            {
                t.Key.Character.X = t.Value.X + ((int)(dx / _tileSize) * _tileSize);
                t.Key.Character.Y = t.Value.Y + ((int)(dy / _tileSize) * _tileSize);
            }
        }
    }

    private void HandleMapDragEnd(CanvasEventArgs e)
    {
        // If no token is currently being dragged..
        if (DraggedTokens.Count == 0)
        {
            // .. Set final offset within the bounds of the min/max scroll positions
            if (ScrollOffsetX - (e.DeltaX * (1/Scale)) <= 0)
                ScrollOffsetX = 0;
            else if (ScrollOffsetX - (e.DeltaX * (1/Scale)) >= _maxScrollX)
                ScrollOffsetX = (int)_maxScrollX;
            else
                ScrollOffsetX = ScrollOffsetX - (int)(e.DeltaX * (1/Scale));

            if (ScrollOffsetY - (e.DeltaY * (1/Scale)) <= 0)
                ScrollOffsetY = 0;
            else if (ScrollOffsetY - (e.DeltaY * (1/Scale)) >= _maxScrollY)
                ScrollOffsetY = (int)_maxScrollY;
            else
                ScrollOffsetY = ScrollOffsetY - (int)(e.DeltaY * (1/Scale));

            // .. Send scroll offset to javascript
            jsr.InvokeVoidAsync("canvasMethods.scrollWindow", ScrollOffsetX, ScrollOffsetY);
        }

        // Token has finished dragging..
        if (DraggedTokens.Count > 0)
        {
            foreach(var t in DraggedTokens)
            {
                // .. Save the changes to the DB
                OnSaveMe?.Invoke(t.Key.Character);
            }

            // .. Reset dragged token
            DraggedTokens.Clear();
        }

        _startScale = -1;
        jsr.InvokeAsync<string>("console.log", "reset startscale");
    }

    private void HandleZoom(ZoomEventArgs e)
    {
        // Pinch zoom event
        if (e.StartDistance > 0)
        {
            if (_startScale == -1)
            {
                _startScale = Scale;
            }
            jsr.InvokeAsync<string>("console.log", string.Format("canvas touchscale: startDist: {0}, newDist: {1}, curScale: {2}", e.StartDistance, e.NewDistance, Scale));
            var _touchScale = (e.NewDistance / e.StartDistance) * _startScale;
            if (_touchScale >= ScaleMin && _touchScale <= ScaleMax)
            {
                OnScaleChanged?.Invoke(_touchScale);
            }
        }
        else
        {
            // Mouse wheel zoom event
            if (e.ZoomDirection && (Scale + ScaleStep <= ScaleMax))
            {
                // Zoom in
                OnScaleChanged?.Invoke(Scale + ScaleStep);
            }
            else if (!e.ZoomDirection && (Scale - ScaleStep >= ScaleMin))
            {
                // Zoom out
                OnScaleChanged?.Invoke(Scale - ScaleStep);
            }
        }

        var relativeClientX = ScrollOffsetX + (e.ClientX * (1 / Scale));
        var relativeClientY = ScrollOffsetY + (e.ClientY * (1 / Scale));

        ScrollOffsetX = (int)(relativeClientX / 2);
        ScrollOffsetY = (int)(relativeClientY / 2);

        // .. Send scroll offset to javascript
        jsr.InvokeVoidAsync("canvasMethods.scrollWindow", ScrollOffsetX, ScrollOffsetY);
    }
}