@using Blazor.Extensions.Canvas
@using Blazor.Extensions
@using Blazor.Extensions.Canvas.Canvas2D
@inject IJSRuntime jsr
@inject DM5KDbContext db

<div id="canvas-container" class="canvas-container" style="@_containerStyle">
    <CascadingValue Value="this">
            @foreach (var c in Campaign.Characters)
            {
                <Token TileSize="@_tileSize" Character="@c"></Token>
            }
    </CascadingValue>
    <BECanvas @ref="_canvasRef" />
</div>

@code {

    [Parameter]
    public Campaign Campaign { get; set; }

    [Parameter]
    public Map Map { get; set; }

    private int _tileSize { get; set; } = 50;
    private string _containerStyle { get; set; }
    private Canvas2DContext _context { get; set; }
    protected BECanvasComponent _canvasRef { get; set; }

    public Character DraggedCharacter { get; set; }

    protected override void OnInitialized()
    {
        // Set container style
        _containerStyle = string.Format("height: {0}px; width: {1}px; zoom: 1; -moz-transform: scale(1);"
            , Map.Height * _tileSize
            , Map.Width * _tileSize);

        base.OnInitialized();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Create the canvas object
            _context = await _canvasRef.CreateCanvas2DAsync();

            // Set Canvas height from map dimensions
            await jsr.InvokeVoidAsync("canvasMethods.setDimensions", (Map.Height * _tileSize) + 1, (Map.Width * _tileSize) + 1);
            await jsr.InvokeVoidAsync("canvasMethods.centerCanvas");
            await jsr.InvokeVoidAsync("inputHandler.initialize", DotNetObjectReference.Create(this), 0.5, 1.5, 0.1);

            // Draw Canvas
            await RedrawCanvas();
        }

        await base.OnInitializedAsync();
    }

    [JSInvokable]
    public async Task TokenMove(int charId, int newX, int newY)
    {
        var character = db.Characters.SingleOrDefault(c => c.ID == charId);
        if (character != null)
        {
            character.X = newX / _tileSize;
            character.Y = newY / _tileSize;
            await db.SaveChangesAsync();
        }
    }

    public async Task Zoom(double scale)
    {
        await jsr.InvokeVoidAsync("inputHandler.zoom", scale);
        StateHasChanged();
    }

    public void SaveDB()
    {
        db.SaveChanges();
    }

    private async Task RedrawCanvas()
    {
        await DrawGrid();
    }

    private async Task DrawGrid()
    {
        for (var x = 0; x <= (Map.Width * _tileSize); x += _tileSize)
        {
            await _context.MoveToAsync(0.5 + x, 0);
            await _context.LineToAsync(0.5 + x, (Map.Height * _tileSize));
        }

        for (var y = 0; y <= (Map.Height * _tileSize); y += _tileSize)
        {
            await _context.MoveToAsync(0, 0.5 + y);
            await _context.LineToAsync((Map.Width * _tileSize), 0.5 + y);
        }

        await _context.SetStrokeStyleAsync("black");
        await _context.StrokeAsync();
    }
}